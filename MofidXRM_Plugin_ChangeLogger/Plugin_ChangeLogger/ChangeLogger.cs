
// <copyright file="ChangeLogger.cs" company="">
// Copyright (c) 2021 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/20/2021 7:01:55 PM</date>
// <summary>Implements the ChangeLogger Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace MofidXRM_Plugin_ChangeLogger.Plugin_ChangeLogger
{

    /// <summary>
    /// ChangeLogger Plugin.
    /// </summary>    
    public class ChangeLogger : PluginBase
    {
        public ChangeLogger(string unsecure, string secure)
            : base(typeof(ChangeLogger))
        {

            // TODO: Implement your custom configuration handling.
        }


        private readonly string preImageAlias = "PreImage";
        private readonly string postImageAlias = "PostImage";
        private string _primaryEntityName;
        private string _messageName;
        private IOrganizationService _service;
        private IPluginExecutionContext _context;
        private Guid _primaryEntityId;
        private Guid _userId;
        private Entity _preImageEntity;
        private Entity _postImageEntity;

        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            _context = localContext.PluginExecutionContext;
            _service = localContext.OrganizationService;

            _userId = _context.UserId;
            _messageName = _context.MessageName;
            _primaryEntityName = _context.PrimaryEntityName;
            _primaryEntityId = _context.PrimaryEntityId;

            List<string> attributeKeyColletion = new List<string>();

            
            Entity changeLogConfiguration = GetChangeLogConfiguration(_messageName == "Update" ? 2 : 1, _primaryEntityName);

            PrepareImages();

            attributeKeyColletion = PrepareAttributeKeyCollection(changeLogConfiguration);

            CreateChangeHistory(attributeKeyColletion);
        }


        private Entity GetChangeLogConfiguration(int sdkMessageTypeCode, string entityLogicalName)
        {
            try
            {
                //GET SDK MESSAGE QUERY
                QueryExpression changeLogConfigurationQueryExpression = new QueryExpression("ms_changehistoryconfiguration");
                changeLogConfigurationQueryExpression.ColumnSet = new ColumnSet(true);
                changeLogConfigurationQueryExpression.Criteria = new FilterExpression
                {
                    Conditions =
                                {
                                    new ConditionExpression
                                    {
                                        AttributeName = "ms_entitylogicalname",
                                        Operator = ConditionOperator.Equal,
                                        Values = { entityLogicalName }
                                    },
                                    new ConditionExpression
                                    {
                                        AttributeName = "ms_sdkmessagetypecode",
                                        Operator = ConditionOperator.Equal,
                                        Values = { sdkMessageTypeCode }
                                    }
                                }
                };

                //RETRIEVE SDK MESSAGE
                EntityCollection changeLogConfigurations = _service.RetrieveMultiple(changeLogConfigurationQueryExpression);
                if (changeLogConfigurations.Entities.Count != 0)
                {
                    return changeLogConfigurations.Entities.First();
                }
                throw new Exception(String.Format("Change Log Configuration {0} was not found."));
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw invalidPluginExecutionException;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }

        private void PrepareImages()
        {
            switch (_messageName)
            {
                case "Create":
                    _postImageEntity = (_context.PostEntityImages != null && _context.PostEntityImages.Contains(this.postImageAlias)) ? _context.PostEntityImages[this.postImageAlias] : null;
                    break;
                case "Update":
                    _preImageEntity = (_context.PreEntityImages != null && _context.PreEntityImages.Contains(this.preImageAlias)) ? _context.PreEntityImages[this.preImageAlias] : null;
                    _postImageEntity = (_context.PostEntityImages != null && _context.PostEntityImages.Contains(this.postImageAlias)) ? _context.PostEntityImages[this.postImageAlias] : null;
                    break;
                case "Delete":
                    break;
            }
        }

        private List<string> PrepareAttributeKeyCollection(Entity changeLogConfiguration)
        {
            List<string> attributeKeyColletion = new List<string>();

            if (_messageName == "Create")
            {
                if (changeLogConfiguration.Attributes.ContainsKey("ms_filteringattributes") && changeLogConfiguration.Attributes["ms_filteringattributes"] != null)
                    if (changeLogConfiguration.Attributes["ms_filteringattributes"].ToString() != "All")
                        attributeKeyColletion = (changeLogConfiguration.Attributes["ms_filteringattributes"].ToString()).Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList<string>();
            }

            if (attributeKeyColletion.Count == 0)
            {
                if (_postImageEntity != null)
                {
                    foreach (KeyValuePair<String, Object> attribute in _postImageEntity.Attributes)
                    {
                        if (!attributeKeyColletion.Contains(attribute.Key))
                            attributeKeyColletion.Add(attribute.Key);
                    }
                }
                if (_preImageEntity != null)
                {
                    foreach (KeyValuePair<String, Object> attribute in _preImageEntity.Attributes)
                    {
                        if (!attributeKeyColletion.Contains(attribute.Key))
                            attributeKeyColletion.Add(attribute.Key);
                    }
                }
            }

            return attributeKeyColletion;
        }

        private void CreateChangeHistory(List<string> attributeKeyColletion) 
        {
            foreach (string attributeKey in attributeKeyColletion)
            {
                ChangeHistory changeHistory = new ChangeHistory();
                Object attributeValue = null;
                changeHistory.ms_recordid = _primaryEntityId.ToString();
                changeHistory.ms_name = _primaryEntityName;
                changeHistory.ms_sdkmessagetypecode = new OptionSetValue(_messageName == "Update" ? 2 : 1);
                changeHistory.ms_date = DateTime.Now;
                changeHistory.ms_userid = new EntityReference("systemuser", _userId);
                changeHistory.ms_attributename = attributeKey;

                if (_postImageEntity.Attributes.ContainsKey(attributeKey))
                {
                    attributeValue = _postImageEntity.Attributes[attributeKey];

                    if (attributeValue is OptionSetValue)
                    {
                        changeHistory.ms_newvalue = ((OptionSetValue)attributeValue).Value.ToString();
                        changeHistory.ms_newname = _postImageEntity.FormattedValues[attributeKey];
                    }
                    else if (attributeValue is EntityReference)
                    {
                        changeHistory.ms_newvalue = ((EntityReference)attributeValue).Id.ToString();
                        changeHistory.ms_newname = ((EntityReference)attributeValue).Name;
                    }
                    else
                    {
                        changeHistory.ms_newvalue = attributeValue.ToString();
                        changeHistory.ms_newname = attributeValue.ToString();
                    }
                }

                if (_messageName == "Update")
                {
                    if (_preImageEntity.Attributes.ContainsKey(attributeKey))
                    {
                        attributeValue = _preImageEntity.Attributes[attributeKey];

                        if (attributeValue is OptionSetValue)
                        {
                            changeHistory.ms_oldvalue = ((OptionSetValue)attributeValue).Value.ToString();
                            changeHistory.ms_oldname = _preImageEntity.FormattedValues[attributeKey];
                        }
                        else if (attributeValue is EntityReference)
                        {
                            changeHistory.ms_oldvalue = ((EntityReference)attributeValue).Id.ToString();
                            changeHistory.ms_oldname = ((EntityReference)attributeValue).Name;
                        }
                        else
                        {
                            changeHistory.ms_oldvalue = attributeValue.ToString();
                            changeHistory.ms_oldname = attributeValue.ToString();
                        }
                    }
                }

                changeHistory.Create(_service);
            }

        }

    }
}
