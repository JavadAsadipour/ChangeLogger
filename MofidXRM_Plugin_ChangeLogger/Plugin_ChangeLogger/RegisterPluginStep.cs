
// <copyright file="RegisterPluginStep.cs" company="">
// Copyright (c) 2021 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/20/2021 9:16:14 PM</date>
// <summary>Implements the RegisterPluginStep Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace MofidXRM_Plugin_ChangeLogger.Plugin_ChangeLogger
{

    /// <summary>
    /// RegisterPluginStep Plugin.
    /// </summary>    
    public class RegisterPluginStep : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterPluginStep"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public RegisterPluginStep(string unsecure, string secure)
            : base(typeof(RegisterPluginStep))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        /// 



        public const string ASSEMBLY_NAME = "MofidXRM_Plugin_ChangeLogger.Plugin_ChangeLogger";
        public const string PLUGIN_TYPE_NAME = "MofidXRM_Plugin_ChangeLogger.Plugin_ChangeLogger.ChangeLogger";
        private string targetId;

        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            Entity target = (Entity)context.InputParameters["Target"];
            targetId = target.Id.ToString();

            int messageTypeCode = target.GetAttributeValue<OptionSetValue>("ms_sdkmessagetypecode").Value;
            string messageTypeCodeName = messageTypeCode == 1 ? "Create" : "Update";
            string entityLogicalName = target.GetAttributeValue<string>("ms_entitylogicalname");
            string filteringAttributes = target.GetAttributeValue<string>("ms_filteringattributes");

            var pluginStepName = messageTypeCodeName + " of " + entityLogicalName;

            var pluginTypeId = GetPluginTypeId(ASSEMBLY_NAME, PLUGIN_TYPE_NAME, pluginStepName, service);

            var messageId = GetSdkMessageId(messageTypeCodeName, service);

            var filterId = GetSdkMessageFilterId(entityLogicalName, messageTypeCodeName, service);

            Guid stepId = SdkMessageStep(ASSEMBLY_NAME, PLUGIN_TYPE_NAME, service, messageTypeCodeName, entityLogicalName, filteringAttributes, 0, 40);

            CreateImage(stepId, messageTypeCodeName, filteringAttributes, 1, service);
            if (messageTypeCode == 2)
                CreateImage(stepId, messageTypeCodeName, filteringAttributes, 0, service);
        }



        public static Guid GetPluginTypeId(string AssemblyName, string PluginTypeName, string PluginStepName, IOrganizationService service)
        {
            try
            {
                //GET ASSEMBLY QUERY
                QueryExpression pluginAssemblyQueryExpression = new QueryExpression("pluginassembly");
                pluginAssemblyQueryExpression.ColumnSet = new ColumnSet("pluginassemblyid");
                pluginAssemblyQueryExpression.Criteria = new FilterExpression
                {
                    Conditions =
          {
            new ConditionExpression
            {
              AttributeName = "name",
              Operator = ConditionOperator.Equal,
              Values = { AssemblyName }
             },
            }
                };

                //RETRIEVE ASSEMBLY
                EntityCollection pluginAssemblies = service.RetrieveMultiple(pluginAssemblyQueryExpression);

                //IF ASSEMBLY IS FOUND
                if (pluginAssemblies.Entities.Count != 0)
                {
                    //ASSIGN ASSEMBLY ID TO VARIABLE
                    Guid assemblyId = pluginAssemblies.Entities.First().Id;

                    //GET PLUGIN TYPES WITHIN ASSEMBLY
                    QueryExpression pluginTypeQueryExpression = new QueryExpression("plugintype");
                    pluginTypeQueryExpression.ColumnSet = new ColumnSet("plugintypeid");
                    pluginTypeQueryExpression.Criteria = new FilterExpression
                    {
                        Conditions =
                                    {
                                        new ConditionExpression
                                        {
                                            AttributeName = "pluginassemblyid",
                                            Operator = ConditionOperator.Equal,
                                            Values = {assemblyId}
                                        },
                                        new ConditionExpression
                                        {
                                            AttributeName = "typename",
                                            Operator = ConditionOperator.Equal,
                                            Values = {PluginTypeName}
                                        },
                                    }
                    };

                    //RETRIEVE PLUGIN TYPES IN ASSEMBLY
                    EntityCollection pluginTypes = service.RetrieveMultiple(pluginTypeQueryExpression);

                    //RETURN PLUGIN TYPE ID
                    if (pluginTypes.Entities.Count != 0)
                    {

                        QueryExpression StepQueryExpression = new QueryExpression("sdkmessageprocessingstep");
                        StepQueryExpression.ColumnSet = new ColumnSet("name");
                        StepQueryExpression.Criteria = new FilterExpression
                        {
                            Conditions =
                                        {
                                            new ConditionExpression
                                            {
                                                AttributeName = "plugintypeid",
                                                Operator = ConditionOperator.Equal,
                                                Values = { pluginTypes.Entities.First().Id }
                                            },
                                            new ConditionExpression
                                            {
                                                AttributeName = "name",
                                                Operator = ConditionOperator.Equal,
                                                Values = { PluginStepName }
                                            }
                                        }
                        };

                        //RETRIEVE PLUGIN TYPES IN ASSEMBLY
                        EntityCollection pluginSteps = service.RetrieveMultiple(StepQueryExpression);
                        //RETURN PLUGIN TYPE ID
                        if (pluginSteps.Entities.Count == 0)
                        {
                            return pluginTypes.Entities.First().Id;
                        }
                        else
                        {
                            return Guid.Empty;
                        }
                    }
                    else
                    {
                        return Guid.Empty;
                    }
                    throw new Exception(String.Format("Plugin Type {0} was not found in Assembly {1}", PluginTypeName, AssemblyName));
                }
                throw new Exception(String.Format("Assembly {0} not found", AssemblyName));
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw invalidPluginExecutionException;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
        public static Guid GetSdkMessageId(string SdkMessageName, IOrganizationService service)
        {
            try
            {
                //GET SDK MESSAGE QUERY
                QueryExpression sdkMessageQueryExpression = new QueryExpression("sdkmessage");
                sdkMessageQueryExpression.ColumnSet = new ColumnSet("sdkmessageid");
                sdkMessageQueryExpression.Criteria = new FilterExpression
                {
                    Conditions =
                                {
                                    new ConditionExpression
                                    {
                                        AttributeName = "name",
                                        Operator = ConditionOperator.Equal,
                                        Values = {SdkMessageName}
                                    },
                                }
                };

                //RETRIEVE SDK MESSAGE
                EntityCollection sdkMessages = service.RetrieveMultiple(sdkMessageQueryExpression);
                if (sdkMessages.Entities.Count != 0)
                {
                    return sdkMessages.Entities.First().Id;
                }
                throw new Exception(String.Format("SDK MessageName {0} was not found.", SdkMessageName));
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw invalidPluginExecutionException;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
        public static Guid GetSdkMessageFilterId(string EntityLogicalName, string SdkMessageName, IOrganizationService service)
        {
            try
            {
                //GET SDK MESSAGE FILTER QUERY
                QueryExpression sdkMessageFilterQueryExpression = new QueryExpression("sdkmessagefilter");
                sdkMessageFilterQueryExpression.ColumnSet = new ColumnSet("sdkmessagefilterid");
                sdkMessageFilterQueryExpression.Criteria = new FilterExpression
                {
                    Conditions =
                                {
                                    new ConditionExpression
                                    {
                                        AttributeName = "primaryobjecttypecode",
                                        Operator = ConditionOperator.Equal,
                                        Values = {EntityLogicalName}
                                    },
                                    new ConditionExpression
                                    {
                                        AttributeName = "sdkmessageid",
                                        Operator = ConditionOperator.Equal,
                                        Values = {GetSdkMessageId(SdkMessageName,service)}
                                    },
                                }
                };

                //RETRIEVE SDK MESSAGE FILTER
                EntityCollection sdkMessageFilters = service.RetrieveMultiple(sdkMessageFilterQueryExpression);

                if (sdkMessageFilters.Entities.Count != 0)
                {
                    return sdkMessageFilters.Entities.First().Id;
                }
                throw new Exception(String.Format("SDK Message Filter for {0} was not found.", EntityLogicalName));
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw invalidPluginExecutionException;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
        public Guid SdkMessageStep(string assemblyName, string pluginTypeName, IOrganizationService service, string messageName, string entityName, string filteringAttributes, int mode, int stage)
        {
            string pluginStepName = messageName + " of " + entityName;
            Guid pluginTypeId = GetPluginTypeId(assemblyName, pluginTypeName, pluginStepName, service);
            Guid messageId = GetSdkMessageId(messageName, service);
            Guid messageFitlerId = Guid.Empty;
            if (entityName != "" && entityName != string.Empty)
            {
                messageFitlerId = GetSdkMessageFilterId(entityName, messageName, service);
            }
            else
                entityName = "any entity";

            if ((pluginTypeId != Guid.Empty && pluginTypeId != null) && (messageId != null && messageId != Guid.Empty))
            {
                Entity step = new Entity("sdkmessageprocessingstep");
                step["name"] = pluginStepName;
                step["configuration"] = "";

                step["invocationsource"] = new OptionSetValue(0);
                step["sdkmessageid"] = new EntityReference("sdkmessage", messageId);

                step["supporteddeployment"] = new OptionSetValue(0);
                step["plugintypeid"] = new EntityReference("plugintype", pluginTypeId);

                step["mode"] = new OptionSetValue(mode); //0=sync,1=async
                step["rank"] = 1;
                step["stage"] = new OptionSetValue(stage); //10-preValidation, 20-preOperation, 40-PostOperation
                step["filteringattributes"] = filteringAttributes;
                if (messageFitlerId != null && messageFitlerId != Guid.Empty)
                {
                    step["sdkmessagefilterid"] = new EntityReference("sdkmessagefilter", messageFitlerId);
                }
                Guid stepId = service.Create(step);

                Entity ent = new Entity("ms_changehistoryconfiguration", new Guid(targetId));
                ent["ms_sdkmessageprocessingstepid"] = stepId.ToString();
                service.Update(ent);

                return stepId;

            }
            return Guid.Empty;
        }
        public void CreateImage(Guid stepId, string SdkMessageName, string filteringAttributes, int imageType, IOrganizationService service)
        {
            Entity image = new Entity("sdkmessageprocessingstepimage");

            if (SdkMessageName == "Create") image["messagepropertyname"] = "Id";
            else if (SdkMessageName == "Update") image["messagepropertyname"] = "Target";

            image["imagetype"] = new OptionSetValue(imageType);
            image["entityalias"] = imageType == 1 ? "PostImage" : "PreImage";
            image["name"] = imageType == 1 ? "PostImage" : "PreImage";
            image["attributes"] = filteringAttributes;
            image["sdkmessageprocessingstepid"] = new EntityReference("sdkmessageprocessingstep", stepId);
            Guid imageId = service.Create(image);
        }
    }

}
